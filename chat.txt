13:35:13	 From Sylwia Vargas (she/her) : what makes a soup, Alex
13:35:19	 From Christy Tropila : smh
13:35:48	 From Isabel K. Lee (they/them) : Last Friday, we did cookies & sessions! Which let us create login functionality for a user.
13:38:44	 From Sylwia Vargas (she/her) : Wow I leave you folks for two days and our app is completely transformed!
13:39:25	 From Isabel K. Lee (they/them) : RESTful routing is a good convention to follow, but you need to be comfortable knowing what code you CAN write and what you CAN’T write.
13:40:19	 From Sylwia Vargas (she/her) : ohhhhh I’d love that power
13:40:25	 From Sylwia Vargas (she/her) : 🔥
13:40:35	 From Sylwia Vargas (she/her) : Bye bye pictures of cute animals
13:41:40	 From Emmanuel Jose : @Sylwia, disclaimer: our app may have photos of cute animals.
13:42:10	 From Isabel K. Lee (they/them) : ”/profile” is a non-RESTful route because it doesn’t fit into one of the 7 conventional routes.
13:44:14	 From Sylwia Vargas (she/her) : @Emmanuel — then make sure I don’t have an access to the delete button :D
13:45:28	 From Isabel K. Lee (they/them) : Eric: I want you to break the conventions. Going above and beyond just the 7 RESTful routes is what makes the difference between a GOOD mod 2 project and a STELLAR one.
13:48:49	 From Sylwia Vargas (she/her) : I love the 1001 questions!
13:53:53	 From Sylwia Vargas (she/her) : 31!
13:53:55	 From Sylwia Vargas (she/her) : now.
13:54:51	 From Waverley Leung : whoa 🤯
13:55:04	 From Sylwia Vargas (she/her) : 🔥 🔥 🔥
13:55:12	 From Sylwia Vargas (she/her) : Rails is so wise
13:55:24	 From Isabel K. Lee (they/them) : After the user logs in, you can redirect them to their profile page with “redirect_to profile_path”.
13:55:28	 From Isabel K. Lee (they/them) : get
13:55:49	 From Isabel K. Lee (they/them) : get ”/profile”, to “students#profile”, as “profile”
13:58:15	 From ChenYun Zhang : very sad that we can decrease age
13:58:19	 From ChenYun Zhang : can't
13:58:24	 From Kalkidan Taye : lol
13:58:25	 From Hortencia Cisneros : ^^^^^^^
13:58:31	 From Sayana Nimaeva : ^^^
13:59:29	 From Isabel K. Lee (they/them) : A “button_to” defaults to a POST request.
14:06:42	 From Isabel K. Lee (they/them) : Write a route for the new “increase_age” POST request.
14:06:58	 From Isabel K. Lee (they/them) : Write a method with the same name in the students controller.
14:09:06	 From Isabel K. Lee (they/them) : The “before_action” in our application controller runs the “authorized_to_see_page” method before anything else.
14:12:04	 From Isabel K. Lee (they/them) : Inside the “increase_age” controller method, write the logic for increasing the logged in user’s age by 1. Use “update” on the logged in user’s instance.
14:14:51	 From Sylwia Vargas (she/her) : how expressive
14:17:15	 From Isabel K. Lee (they/them) : You can an edit form write on the profile page.
14:17:26	 From Isabel K. Lee (they/them) : *put an
14:18:28	 From Isabel K. Lee (they/them) : Let’s change the “button_to” HTTP verb to PATCH, instead of POST, since we’re updating an existing instance, instead of creating a new one.
14:19:03	 From Isabel K. Lee (they/them) : button_to “increase age”, “/increase_age”, method: :patch
14:20:06	 From Isabel K. Lee (they/them) : Plot twist: let’s make the increased age dynamic, instead of hardcoding it by 1.
14:21:13	 From Isabel K. Lee (they/them) : Change the PATCH route to add a dynamic URL => patch “increase_age/:age_to_increase”
14:21:27	 From Isabel K. Lee (they/them) : Therefore, the user will have to add the number that they want to increase the age by.
14:22:31	 From Sylwia Vargas (she/her) : 🌶 🌶 🌶 🌶
14:22:33	 From Sylwia Vargas (she/her) : spicy
14:22:35	 From ChenYun Zhang : 🤯
14:25:03	 From Sylwia Vargas (she/her) : Think about medium, e.g.: when you click-hold the clapping icon, it measures the time you keep it clicked and then increases the number of claps.
14:25:17	 From Sylwia Vargas (she/her) : Now you can build it yourself!
14:25:52	 From Isabel K. Lee (they/them) : ^^^^^^^^^^^ great example
14:28:01	 From Sylwia Vargas (she/her) : or, if you have the stars buttons on some review page. Each star has a value associated with it and that’s how the number gets to the params.
14:30:40	 From Sylwia Vargas (she/her) : You should be following the convention and break it only if you have a good reason for that. A bit of customization is always great and won’t be confusing for other devs.
14:31:01	 From Kalkidan Taye : ^^^Thank you Sylwia
14:32:49	 From Sylwia Vargas (she/her) : you can break everything but always ask yourself why you’re trying to do that. If there’s already a solution within the convention, stick to the convention. That doesn’t make you boring — just concise!
14:33:12	 From Sylwia Vargas (she/her) : 🔥 🔥 🔥 🔥  I love partials!
14:40:18	 From Isabel K. Lee (they/them) : 1. Create a new file in the views folder for a model. Make sure the title starts with an underscore.
14:40:49	 From Isabel K. Lee (they/them) : 2. Go to the view file that you want to render this new file, and write “<%= render “filename” %>”
14:41:04	 From Emmanuel Jose : Can the partial be rendered in a different model view file?
14:41:14	 From Isabel K. Lee (they/them) : Partials allows us to reuse code without rewriting it.
14:41:46	 From Isabel K. Lee (they/them) : Example: create a partial for the student form, and then render this in the “new” and “edit” view files.
14:44:40	 From Emmanuel Jose : Thank you!
14:44:45	 From Sylwia Vargas (she/her) : you can use relative path for that
14:45:11	 From Sylwia Vargas (she/her) : e.g. <%= render :partial => ‘students/chicken’ %>
14:45:19	 From Sylwia Vargas (she/her) : Or even
14:45:26	 From Sylwia Vargas (she/her) : <%= render ‘students/chicken’ %>
14:47:19	 From Sylwia Vargas (she/her) : @ERIC => a common q at this point: HOW DOES RAILS KNOW IF IT’S EDIT OR CREATE WITH PARTIALS?!
14:49:54	 From Sylwia Vargas (she/her) : A: rails reaches out to the controller, then checks if @student has an id and if it does, Rails pulls up an edit form; if not, a create form
14:50:16	 From Sylwia Vargas (she/her) : ---------
14:50:21	 From Sylwia Vargas (she/her) : OR…. A nav bar!
14:50:26	 From Sylwia Vargas (she/her) : OR… a logo
14:50:30	 From Sylwia Vargas (she/her) : OR… a footer
14:50:35	 From Isabel K. Lee (they/them) : If you want to create a persistent element, put it inside your application.html file, which is inside the layouts folder.
14:53:25	 From Emmanuel Jose : Daisy +++
14:53:30	 From Sylwia Vargas (she/her) : Do you all now see why we called this lecture “Rails fun”? 🥳 well, in case you haven’t noticed: partials, custom routes, layouts ARE FUN.
14:53:34	 From Sylwia Vargas (she/her) : Daisy ++
14:56:39	 From Isabel K. Lee (they/them) : We’re able to access the helper method inside the application controller because of Ruby’s inheritance rules.
15:03:08	 From Isabel K. Lee (they/them) : POST-LECTURE CHECK-IN FORM: https://docs.google.com/forms/d/e/1FAIpQLSd1t5khOZLtqz-uGVuRcf3EffxwyrN8GcZNQnvVVHQY9Wm3nA/viewform
